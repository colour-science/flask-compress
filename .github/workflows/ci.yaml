# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  pull_request:
  push:
    branches:
    - master
    tags:
    - "v*"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9']
        os: [ubuntu-latest] #, windows-latest, macos-latest]

    name: ${{ matrix.os }} - ${{ matrix.python-version }}
    steps:
    - uses: actions/checkout@v4
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: pip install tox
    - name: Run tox
      # Run tox using the version of Python in `PATH`
      run: tox -e py

  dist:
    runs-on: ubuntu-latest
    needs: [test]
    name: Build Python packages
    steps:
    - uses: actions/checkout@v4
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - uses: actions/setup-python@v5
      with:
        python-version: "3.8"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade wheel setuptools build
    - name: Build package
      run: python -m build -s -w -o dist/
    - uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist

  dist_check:
    runs-on: ubuntu-latest
    needs: [dist]
    name: Twine check
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: "3.8"
    - name: Install dependencies
      run: pip install twine
    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
    - run: twine check dist/*

  dist_upload:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: [dist_check]
    name: PyPI upload
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
